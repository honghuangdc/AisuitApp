<template>
	<view class="update-phone-container" :style="{ height: windowHeight }">
		<view class="input-container">
			<view class="list-item">
				<text class="list-item-name">旧手机号</text>
				<text class="list-item-value">{{ oldPhone }}</text>
			</view>
			<ai-input
				ref="phone"
				name="phone"
				v-model="model.phone"
				placeholder="新手机号"
				:rule="rules.phone"
				maxlength="11"
				:width="686"
			>
			</ai-input>
			<ai-input
				ref="validateCode"
				name="validateCode"
				v-model="model.validateCode"
				placeholder="验证码"
				:rule="rules.validateCode"
				maxlength="6"
				:width="686"
			>
				<template>
					<text slot="option" class="button__get-code" @click="getValidateCode">{{ count ? `${count}秒后重发` : '获取验证码' }}</text>
				</template>
			</ai-input>
		</view>
		<view class="button-container" @click="submitForm">
			<text class="button__save">保存</text>
		</view>
	</view>
</template>

<script>
import AiInput from '../../components/AiInput';
import REGEXP from '../../utils/regExp.js';
export default {
	components: {
		AiInput
	},
	data() {
		return {
			windowHeight: 675,
			oldPhone: '',
			newPhone: '',
			count: null,
			interval: null,
			model: {
				phone: '',
				validateCode: ''
			},
			rules: {
				phone: { pattern: REGEXP.PHONE_REGEXP, message: '手机格式输入错误！', requiredMsg: '手机号不能为空！' },
				validateCode: { pattern: REGEXP.VALIDATE_CODE_REGEXP, message: '验证码格式输入错误！', requiredMsg: '验证码不能为空！' }
			},
		}
	},
	onLoad(options) {
		this.windowHeight = uni.getSystemInfoSync().windowHeight
		this.oldPhone = options.phone
	},
	methods: {
		// 获取验证码
		getValidateCode() {
			const { validateEmpty, validateValue } = this.$refs.phone
			if(validateEmpty() === 'success' && validateValue() === 'success') {
				uni.showLoading({
					title: '加载中！'
				})
				this.countDown()
				setTimeout(() =>{
					uni.hideLoading()
				}, 1000)
				_getValidateCode(this.model.phone).then(res => {
					uni.setStorageSync('correctCode', res.code)
				})
			}
		},
		
		// 校验验证码
		checkValidateCode() {
			const { phone, validateCode } = this.model
			if(validateCode !== uni.getStorageSync('correctCode')) {
				uni.showToast({
					title: '验证码不正确，请重新输入！',
					icon: 'none'
				})
				return
			}
			_checkValidateCode(phone, validateCode).then(res => {
				uni.showToast({
					title: res.msg,
					icon: 'none'
				})
				if(res.code == "0") {
					this.getUserInfo()
				}
			})
		},
		
		// 表单提交
		submitForm() {
			if(this.checkForm()) {
				return
			}
			// 校验通过,发起请求
			this.checkValidateCode()
			uni.navigateTo({
				url: '/pages/user/user'
			})
		},
		
		// 60秒计时
		countDown() {
			if (this.count) {
				return
			}
			this.count = 60;
			this.interval = setInterval(() => {
				this.count ? this.count -- : clearInterval(this.interval);
			}, 1000);
		},
		
		// 表单校验
		checkForm() {
			const result = [];
			for(let key in this.model) {
				if(this.$refs[key].validateEmpty() === 'error'){
					result.push('error')
				} else {
					result.push(this.$refs[key].validateValue())
				}
			}
			return result.some(value => {  // 返回true,代表有错误
				return value === 'error'
			})
		}
	}
}
</script>

<style scoped>
	.update-phone-container {
		justify-content: space-between;
		padding-bottom: 88upx;
	}
	
	.input-container {
		width: 750upx;
		padding: 0 32upx;
	}
	
	.list-item {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		position: relative;
		height: 96upx;
		padding-right: 24upx;
		border-style: solid;
		border-color: #f5f5f5;
		border-bottom-width: 1upx;
	}
	
	.list-item-name {
		font-size: 34upx;
		color: #333;
	}
	
	.list-item-value {
		margin-right: 18upx;
		font-size: 30upx;
		color: #999;
	}
	
	.button-container {
		padding: 0 24upx;
	}
	
	.button__get-code {
		width: 144upx;
		height: 54upx;
		text-align: center;
		line-height: 54upx;
		font-size: 24upx;
		color: #1677FF;
		border-style: solid;
		border-color: #1677FF;
		border-width: 1upx;
		border-radius: 100upx;
	}
	
	
	.button__save {
		height: 98upx;
		line-height: 98upx;
		text-align: center;
		border-width: 0;
		border-radius: 8upx;
		background-color: #FC3D5F;
		font-size: 36upx;
		color: #fff;
	}
</style>
